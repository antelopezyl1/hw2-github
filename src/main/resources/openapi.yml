openapi: 3.0.3
info:
  title: a github API
  version: 1.0.1
  description: an API for issue CRUD* and comments
  contact:
    name: Yuling Zang
    email: yuling.zang@sjsu.edu
    url: http://127.0.0.1:8080
servers: 
  - url: http://127.0.0.1:8080
#security:
 # - bearerAuth: []
tags:
  - name: Issues
    description: Endpoints for listing and managing issues
  - name: Comments
    description: Endpoints for issue comments
  - name: Webhooks
    description: GitHub webhook receiver


paths:
  /api/issues:
    get:
      operationId: listIssues
      summary: get issue list
      tags: [Issues]
      description: get all issues
      parameters:
        - name: page
          in: query
          description: page number
          schema:
            type: integer
            default: 1
        - $ref: '#/components/parameters/status'
        - name: per_page
          in: query
          description: Number of items to return per page
          schema:
            type: integer
            default: 10 
            minimum: 1
            maximum: 20 
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/issues"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' }  
    post:
        operationId: createIssue
        summary: create a new issue
        tags: [Issues]
        description: a new issue
        requestBody: 
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/issuesInput" 
        responses:
          "201":
            description: success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    data:
                        $ref: "#/components/schemas/issues"
          '400': { $ref: '#/components/responses/BadRequest' }
          '401': { $ref: '#/components/responses/Unauthorized' }
          '403': { $ref: '#/components/responses/Forbidden' }
          '404': { $ref: '#/components/responses/NotFound' }
          '409': { $ref: '#/components/responses/Conflict' }
          '500': { $ref: '#/components/responses/InternalError' }
          '503': { $ref: '#/components/responses/ServiceUnavailable' }
          default: { $ref: '#/components/responses/Error' }  

  /api/issues/{issueId}:
    get:
      operationId: getIssue
      tags: [Issues]
      description: get specific issue
      parameters:
        - name: issueId
          in: path
          description: issue id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                      $ref: "#/components/schemas/issues"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' }  
    patch:
      operationId: updateIssue
      tags: [Issues]
      description: update a specific issue
      parameters:
        - $ref: "#/components/parameters/issueId"
      requestBody:
        description: update issue info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/issuesInput"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                      $ref: "#/components/schemas/issues"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' } 
          

  /api/issues/{issueId}/comments:
    get:
      operationId: listCommentsOfIssues
      summary: get comments of an issue
      tags: [Comments]
      description: get the comments of a specific issue
      parameters:
        - name: issueId
          in: path
          required: true
          description: comments of the single issue
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          description: page number
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/comments"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' } 
    post:
      operationId: createCommentsforIssues
      tags: [Comments]
      description: create a new comment for specific issue
      parameters:
        - $ref: "#/components/parameters/issueId"
      summary: create a new issue
      requestBody: 
        description: a new issue
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentsInput" 
      responses:
          "201":
            description: success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    data:
                        $ref: "#/components/schemas/comments"
          '400': { $ref: '#/components/responses/BadRequest' }
          '401': { $ref: '#/components/responses/Unauthorized' }
          '403': { $ref: '#/components/responses/Forbidden' }
          '404': { $ref: '#/components/responses/NotFound' }
          '409': { $ref: '#/components/responses/Conflict' }
          '500': { $ref: '#/components/responses/InternalError' }
          '503': { $ref: '#/components/responses/ServiceUnavailable' }
          default: { $ref: '#/components/responses/Error' }  

  /api/comments/{commentId}:
    patch:
      operationId: updateCommentForIssues
      tags: [Comments]
      description: update comment of specific issue
      parameters: 
        - $ref: "#/components/parameters/commentId"
      requestBody:
        description: update the comment
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentsInput"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                      $ref: "#/components/schemas/comments"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' } 
    delete:
      operationId: deleteCommentForIssues
      tags: [Comments]
      description: delete specific comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema: { type: integer, minimum: 1 }
          description: delete the comment
      responses:
        "204":
          description: success

  /api/webhooks/github:
    post:
      operationId: receiveGithubWebhook
      summary: GitHub webhook receiver (issues & issue_comment)
      #security: []
      description: create webhook
      tags: [Webhooks]
      parameters:
        - $ref: '#/components/parameters/XGitHubEvent'
        - $ref: '#/components/parameters/XGitHubDelivery'
        - $ref: '#/components/parameters/XHubSignature256'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubWebhookPayload'    
      responses:
        '204': { description: accepted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '400': { $ref: '#/components/responses/BadRequest' }
      
components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: JWT Authorization header using the Bearer scheme. #Example: 'Bearer {token}'  
  schemas:
    issues:
      type: object
      additionalProperties: false
      required: [title, author, content, createdOn, lastUpdated]
      properties:
        issueId: { type: integer, readOnly: true, minimum: 1}
        title: { type: string, maxLength: 200 }
        author: { type: string }
        labels: { type: array, items: { type: string }}
        content: { type: string}
        totalComments: { type: integer, readOnly: true, minimum: 0 }
        projects: { type: array, items: { type: string }}
        milestones: { type: array, items: { type: string } }
        assignees: { type: array, items: { type: string }}
        createdOn: { type: string, format: date-time, readOnly: true }
        lastUpdated: { type: string, format: date-time,readOnly: true }
        status: 
          type: string
          enum: [open, closed]
          default: open
    issuesInput:
      type: object
      additionalProperties: false
      required: [title, author, content]
      properties:
        title: { type: string, maxLength: 200 }
        author: { type: string }
        labels: { type: array, items: { type: string }}
        content: { type: string}
        projects: { type: array, items: { type: string }}
        milestones: {type: array, items: { type: string }}
        status: 
          type: string
          enum: [open, closed]
          default: open
    comments:
      type: object
      additionalProperties: false
      required: [commentId, author, content, createdOn]
      properties:
        commentId: { type: integer, minimum: 1, readOnly: true}
        author: { type: string }
        content: { type: string}
        createdOn: { type: string, format: date-time, readOnly: true}
    commentsInput:
      type: object
      additionalProperties: false
      required: [author, content]
      properties:
        author: { type: string }
        content: { type: string}
    error:
      type: object
      required: [code, message]
      properties:
        code:    { type: integer, example: 400 }
        message: { type: string, example: Parameter verification failed }
    GitHubWebhookPayload:
      oneOf:
        - $ref: "#/components/schemas/GitHubIssuesEvent"
        - $ref: "#/components/schemas/GitHubIssueCommentEvent"
    GitHubIssuesEvent:
      type: object
      additionalProperties: true
      required: [action, issue]
      properties:
        action: { type: string, enum: [opened, edited, closed, reopened] }
        issue:  { $ref: '#/components/schemas/GH_Issue' }
        repository: { $ref: '#/components/schemas/GH_Repository' }
        sender: { $ref: '#/components/schemas/GH_User' }
    GitHubIssueCommentEvent:
      type: object
      additionalProperties: true
      required: [action, issue, comment]
      properties:
        action: { type: string, enum: [created, edited, deleted] }
        issue:  { $ref: '#/components/schemas/GH_Issue' }
        comment: { $ref: '#/components/schemas/GH_Comment' }
        repository: { $ref: '#/components/schemas/GH_Repository' }
        sender: { $ref: '#/components/schemas/GH_User' }
    GH_Issue:
      type: object
      additionalProperties: true
      required: [id, title, number, state]
      properties:
        pull_request:
          type: object
          additionalProperties: true
        id: { type: integer, readOnly: true, minimum: 1}
        title: { type: string, maxLength: 200 }
        labels: { type: array, items: { type: object }}
        number: {type: integer}
        assignees: { type: array, items: { type: object }}
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time,readOnly: true }
        closed_at: {type: string, format: date-time,readOnly: true }
        user:  { $ref: '#/components/schemas/GH_User' }
        state: 
          type: string
          enum: [open, closed]
          default: open
    GH_User:
      type: object
      additionalProperties: true
      required: [id, login]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        login: { type: string, maxLength: 200 }
    GH_Repository:
      type: object
      additionalProperties: true
      required: [id, full_name, html_url]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        full_name: { type: string, maxLength: 200 }
        html_url: {type: string, format: uri}
    GH_Comment:
      type: object
      additionalProperties: true
      required: [ id, user, created_at, html_url, body]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        user: 
          type: object
          properties:
            login: { type: string, maxLength: 200 }
            id: { type: integer, minimum: 1 } 
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time,readOnly: true }
        html_url: {type: string, format: uri}
        body: {type: string}
           
  parameters:
    issueId:
      name: issueId
      in: path
      required: true
      description: Issue identifier
      schema: { type: integer, minimum: 1 }
    commentId:
      name: commentId
      in: path
      required: true
      description: Comment identifier
      schema: { type: integer, minimum: 1 }
    status:
      name: status
      in: query
      description: status of issue
      schema:
          type: string
          enum: [open, closed, all]
          default: open
    XGitHubEvent:
      name: X-GitHub-Event
      in: header
      required: true
      description: github event,such as issues, issue_comments
      schema: { type: string, example: issues}
    XGitHubDelivery:
      name: X-GitHub-Delivery
      in: header
      required: true
      description: uuid of this event
      schema: { type: string, format: uuid, example: 8e9a1d3a-4b8a-4a8e-9f52-0b1d1f2f3c4d}
    XHubSignature256:
      name: X-Hub-Signature-256
      in: header
      required: true
      description: signature HMAC-SHA256
      schema: {type: string, pattern: '^sha256=[a-f0-9]{64}$'}
  responses:
    BadRequest:
      description: bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/error' }
          examples:
            validation:
              value:
                code: 400
                message: Parameter verification failed
                details: [{ field: title, error: required }]
    Unauthorized:
      description: unauthorized
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/error'
    Forbidden:
      description: access denied
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/error'
    NotFound:
      description: resource does not exist
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    Conflict:
      description: resource conflict
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    InternalError:
      description: server internal error
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    ServiceUnavailable:
      description: server unavailable
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    Error:
      description: other error
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
        
      
