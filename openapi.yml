openapi: 3.1.0
info:
  title: a github API
  version: 1.0.2
  description: an API for issue CRUD* and comments
  contact: 
    url: https://127.0.0.1:8080
    
servers: 
  - url: http://localhost:{port}
    variables:
      port: { default: "8080" }
security:
  - bearerAuth: []
tags:
  - name: Issues
    description: Endpoints for listing and managing issues
  - name: Comments
    description: Endpoints for issue comments
  - name: Webhooks
    description: GitHub webhook receiver
  - name: healthz
    description: health check


paths:
  /issues:
    get:
      operationId: listIssues
      summary: get issue list
      tags: [Issues]
      description: get all issues
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/labels' 
      responses:
        "200":
          description: success
          headers:
            Link: { description: pagination links, schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: integer } }
            X-RateLimit-Reset: { schema: { type: integer } }
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Issue"
              examples:
                page:
                  value:
                    [{ number: 1, html_url: "https://github.com/OWNER/REPO/issues/1002", state: open, title: "A", created_at: "2025-09-01T00:00:00Z", updated_at: "2025-09-12T00:00:00Z" },
                    { number: 2, html_url: "https://github.com/OWNER/REPO/issues/1003", state: closed, title: "B", created_at: "2025-08-01T00:00:00Z", updated_at: "2025-09-01T00:00:00Z"}]
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' }  
    post:
        operationId: createIssue
        summary: create a new issue
        tags: [Issues]
        description: a new issue
        requestBody: 
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueInput" 
        responses:
          "201":
            description: success
            headers:
              Location:
                description: Resource URL
                schema: { type: string, format: uri } 
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Issue"
                example:
                      number: 1234
                      html_url: "https://github.com/OWNER/REPO/issues/1234"
                      state: "open"
                      title: "Issue Title Example1"
                      body: "optional body"
                      created_at: "2025-09-01T00:00:00Z"
                      updated_at: "2025-09-12T00:00:00Z"
          '400': { $ref: '#/components/responses/BadRequest' }
          '401': { $ref: '#/components/responses/Unauthorized' }
       

  /issues/{number}:
    get:
      operationId: getIssue
      tags: [Issues]
      description: get specific issue
      parameters:
        - name: number
          in: path
          description: issue id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
              example:
                number: 2002
                title: "Issue Title Example"
                state: "open"
                created_at: "2025-09-01T00:00:00Z"
                updated_at: "2025-09-12T00:00:00Z"
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/Error' }  
    patch:
      operationId: updateIssue
      tags: [Issues]
      description: update a specific issue
      parameters:
        - $ref: "#/components/parameters/number"
      requestBody:
        description: update issue info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssuePatch"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/Error' } 
          

  /issues/{number}/comments:
    get:
      operationId: listCommentsOfIssues
      summary: get comments of an issue
      tags: [Comments]
      description: get the comments of a specific issue
      parameters:
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/page'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' } 
    post:
      operationId: createCommentsforIssues
      tags: [Comments]
      description: create a new comment for specific issue
      parameters:
        - $ref: "#/components/parameters/number"
      summary: create a new comment for a specific issue
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput" 
      responses:
          "201":
            description: success
            headers:
              Location:
                description: Resource URL
                schema: { type: string, format: uri }
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          default: { $ref: '#/components/responses/Error' }  

  /comments/{commentId}:
    patch:
      operationId: updateCommentForIssues
      tags: [Comments]
      description: update comment of specific issue
      parameters: 
        - $ref: "#/components/parameters/commentId"
      requestBody:
        description: update the comment
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        default: { $ref: '#/components/responses/Error' } 
    delete:
      operationId: deleteCommentForIssues
      tags: [Comments]
      description: delete specific comment
      parameters:
        - $ref: '#/components/parameters/commentId'
      responses:
        "204":
          description: success

  /webhook:
    post:
      operationId: receiveGithubWebhook
      summary: GitHub webhook receiver (issues & issue_comment)
      security: []
      description: create webhook
      tags: [Webhooks]
      parameters:
        - $ref: '#/components/parameters/XGitHubEvent'
        - $ref: '#/components/parameters/XGitHubDelivery'
        - $ref: '#/components/parameters/XHubSignature256'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubWebhookPayload'    
      responses:
        '204': { description: accepted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /healthz:
    get:
      operationId: healthCheck
      security: []
      description: check health status
      summary: Liveness probe
      tags: [healthz]
      responses:
        '200':
          description: ok

      
components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: JWT Authorization header using the Bearer scheme. #Example: 'Bearer {token}'  
  schemas:
    Issue:
      type: object
      additionalProperties: true
      required: [number, title, state, created_at, updated_at]
      properties:
        number: { type: integer, readOnly: true}
        title: { type: string, maxLength: 200 }
        body: {type: string, default: ""}
        labels: { type: array, items: { type: string }}
        totalComments: { type: integer, readOnly: true, minimum: 0 }
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time,readOnly: true }
        html_url:   { type: string, format: uri}
        state: 
          type: string
          enum: [open, closed]
          default: open
    IssueInput:
      type: object
      additionalProperties: false
      required: [title]
      properties:
        title: { type: string, maxLength: 200 }
        body: {type: string, default: ""}
        labels: { type: array, items: { type: string }} 
    Comment:
      type: object
      additionalProperties: false
      required: [id, body, user, created_at, html_url]
      properties:
        id: { type: integer, minimum: 1, readOnly: true}
        body: { type: string }
        user:
          type: object
          required: [login, id]
          properties:
            login: { type: string }
            id: { type: integer }
        created_at: { type: string, format: date-time, readOnly: true}
        html_url: { type: string, format: uri }
    CommentInput:
      type: object
      additionalProperties: false
      required: [body]
      properties:
        body: { type: string }
    IssuePatch:
      type: object
      additionalProperties: false
      properties:
        title: { type: string, maxLength: 200 }
        body: { type: string }
        state: { type: string, enum: [open, closed] }
    error:
      type: object
      required: [code, message]
      properties:
        code:    { type: integer, example: 400 }
        message: { type: string, example: Parameter verification failed }
    GitHubWebhookPayload:
      oneOf:
        - $ref: "#/components/schemas/GitHubIssuesEvent"
        - $ref: "#/components/schemas/GitHubIssueCommentEvent"
        - $ref: "#/components/schemas/GitHubPingEvent"
    GitHubIssuesEvent:
      type: object
      additionalProperties: true
      required: [action, issue]
      properties:
        action: { type: string, enum: [opened, edited, closed, reopened] }
        issue:  { $ref: '#/components/schemas/GH_Issue' }
        repository: { $ref: '#/components/schemas/GH_Repository' }
        sender: { $ref: '#/components/schemas/GH_User' }
    GitHubIssueCommentEvent:
      type: object
      additionalProperties: true
      required: [action, issue, comment]
      properties:
        action: { type: string, enum: [created, edited, deleted] }
        issue:  { $ref: '#/components/schemas/GH_Issue' }
        comment: { $ref: '#/components/schemas/GH_Comment' }
        repository: { $ref: '#/components/schemas/GH_Repository' }
        sender: { $ref: '#/components/schemas/GH_User' }
    GitHubPingEvent:
      type: object
      additionalProperties: true
      properties:
        zen: { type: string }
        hook_id: { type: integer }
    GH_Issue:
      type: object
      additionalProperties: true
      required: [id, title, number, state]
      properties:
        pull_request:
          type: object
          additionalProperties: true
        id: { type: integer, readOnly: true, minimum: 1}
        title: { type: string, maxLength: 200 }
        labels: { type: array, items: { type: object }}
        number: {type: integer}
        assignees: { type: array, items: { type: object }}
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time,readOnly: true }
        closed_at: {type: string, format: date-time,readOnly: true }
        user:  { $ref: '#/components/schemas/GH_User' }
        state: 
          type: string
          enum: [open, closed]
          default: open
    GH_User:
      type: object
      additionalProperties: true
      required: [id, login]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        login: { type: string, maxLength: 200 }
    GH_Repository:
      type: object
      additionalProperties: true
      required: [id, full_name, html_url]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        full_name: { type: string, maxLength: 200 }
        html_url: {type: string, format: uri}
    GH_Comment:
      type: object
      additionalProperties: true
      required: [ id, user, created_at, html_url, body]
      properties:
        id: { type: integer, readOnly: true, minimum: 1}
        user: 
          type: object
          properties:
            login: { type: string, maxLength: 200 }
            id: { type: integer, minimum: 1 } 
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time,readOnly: true }
        html_url: {type: string, format: uri}
        body: {type: string}
           
  parameters:
    number:
      name: number
      in: path
      required: true
      description: Issue identifier
      schema: { type: integer, minimum: 1 }
    commentId:
      name: commentId
      in: path
      required: true
      description: Comment identifier
      schema: { type: integer, minimum: 1 }
    page:
      name: page
      in: query
      description: page number
      schema: { type: integer, default: 1}
    per_page:
      name: per_page
      in: query
      description: Number of items to return per page
      schema: {type: integer, default: 10, minimum: 1, maximum: 100}
    state:
      name: state
      in: query
      description: status of issue
      schema:
          type: string
          enum: [open, closed, all]
          default: open
    labels:
      name: labels
      in: query
      description: filter by labels
      schema: { type: string, example: "bug,good first issue" }
    XGitHubEvent:
      name: X-GitHub-Event
      in: header
      required: true
      description: github event,such as issues, issue_comments
      schema: { type: string, example: issues}
    XGitHubDelivery:
      name: X-GitHub-Delivery
      in: header
      required: true
      description: uuid of this event
      schema: { type: string, format: uuid, example: 8e9a1d3a-4b8a-4a8e-9f52-0b1d1f2f3c4d}
    XHubSignature256:
      name: X-Hub-Signature-256
      in: header
      required: true
      description: signature HMAC-SHA256
      schema: {type: string, pattern: '^sha256=[a-f0-9]{64}$'}
  responses:
    BadRequest:
      description: bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/error' }
          examples:
            validation:
              value:
                code: 400
                message: Parameter verification failed
    Unauthorized:
      description: unauthorized
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/error'
          examples:
            missingToken:
              value: { code: 401, message: "Missing or invalid token" }
    Forbidden:
      description: access denied
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/error'
    NotFound:
      description: resource does not exist
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/error' 
          examples:
            issueNotFound:
              value: { code: 404, message: "Issue not found" }
    Conflict:
      description: resource conflict
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    InternalError:
      description: server internal error
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    ServiceUnavailable:
      description: server unavailable
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
    Error:
      description: other error
      content: { application/json: { schema: { $ref: '#/components/schemas/error' } } }
        
      
